%% Tutorial for gPPI-network anaylsis based on one subjects% Gregory Gutman (11.08.22)%{gppi-network builds on the gPPI Version 13.1 Toolbox by McLaren et al. (2013) for task-based experiments and enables the user to apply general PsychoPhysiological Interaction analysis on a network of regions reciprocally. While in the original gPPI the eigenvariate of a seed region is chosen in predicting the activity of different target voxels (often whole-brain), in gppi-network a set of regions can be choosen. There eigenvariates will then be extracted and used as seed- as well as target-region for gPPI analysis. This results in an individual square matrix - a little bit similar to a correlation matrix even though its not a symmetric matrix - that can be used for further analysis. I included a short tutorial based on one open data set from Masterdon et al. (2016).The tutorial can be easily run, you just need to update the working directory in the main.m and visualization_gppi_mat.m. The functions of gppi-network (found in library) should not need any chance. inits.m sets up all used parameters and gives an explanation of the needed arguments and is included in the main.m script as a function. The main.m script load these parameters and runs the steps of the gppi-network packet. Additionally, visualization_gppi_mat.m is just the code of how I created the images shown here.The packet and tutorial are programmed for Windows, but you can find an additional library for gppi-network and adapted tutorial-scripts in the folder linux&max that should run on these systems. As a prerequisite you need SPM and some SPM-functions might rely on the Image Processing Toolbox. You just need to replace the lib-folder and use the included tutorial-scripts.In this tutorial I used fMRI data from one subject provided by Masterdon et al. (2016). During their experiment they compared the effect of showing high- and low-calorie food as well as controll images early and late in the day. For the tutorial I only analysed the morning session. Given the three conditions 'high', 'low' and 'cont' (for control) the following regressors where used in modelling the respected target time series:target(t) = β0 + β11 high(t) + β12 low(t) + β13 cont(t) + β2 seed(t) + β31 high_seed(t) + β32 low_seed(t) + β33 cont_seed(t) + e(t)The defined network used all 246 regions included in the Brainnetome Atlas developed by Fan et al. (2016). Individual ROI-masks with a sphere of 8 mm radius where created. There were centered around peaks based on standard first-level activity contrasts, in this case high>low calorie food images. The different gPPI parameters were then created for each seed region and in a following step applied to each target region to estimate the beta weights. Similar to activity first-level anaylsis the beta weights can be combined to look at contrasts of interest. In the following I will look mainly at the β31 > β32 contrast or in other words the ppi-contrast for high>low calorie food.%}    %% Working directory (needs to be updated)wkdir           =  '\gppi-network';%% Add paths to library and inits.maddpath D:\emoreg\scripts\network\gppi_network\libaddpath([wkdir, '\tutorial'])%% Initialize parameters % save worksapce of inits-function and load into maininits(wkdir)load('parameters.mat')%% Create individual roi_masks% adapts general roi-masks to individual mask by drawing a volumne around defined peaksroi_peak_masks(fstFolder,ntwFolder,roiFolder,roiList,sphere,sphereInfo,contPeak,directionList);%% Extract eigenvariates% creates seed-eigenvariate: whitened, filtered, cofounds removed % creates target-eigenvariate: whitened, frequenz-filteredeigenvariate(fstFolder,ntwFolder,contAdj,roiList,roiSubFolder);%% Create nifti out of eigenvariates%binds multiple eigenvariate.mat's into single niftieigenvariate2nii(fstFolder,ntwFolder);%% Create SPM.mat for eigenvariate.nii%creates SPM.mat for eigenvariate.nii containing all relevant information e.g. design structureeigenvariate_glm(ntwFolder, evGLM);%% Create gppi-parameter for all eigenvariates% creates gppi parameters: design variables, deconvoluded seed timeseries, interaction between design variables and seed time seriesgppi_parameter(fstFolder, ntwFolder, tasks);%% Estimate beta-values with eigenvariates% apply gppi parameters on target rois to get beta values for each individual separately (first-level)errorRoisBeta   = gppi_beta(ntwFolder, roiList);%% Run gPPI-contrasts% computes t- and F-contrasts based on beta values for each individual separately (first-level)% Define contrast for physiological parametercontrasts(1).name       = 'roi_ev';contrasts(1).stat       = 'T';contrasts(1).c          = [zeros(6,1); 1; zeros(12,1); 1; zeros(8,1)];% Define contrast for high- over low-calorie-food for psychological parametercontrasts(2).name       = 'hi_over_low';contrasts(2).stat       = 'T';contrasts(2).c          = [1; -1; zeros(11,1); 1; -1; zeros(13,1)];% Define contrast for high- over low-calorie food for psychophysiological-interaction parametercontrasts(3).name       = 'ppi-hi_over_low';contrasts(3).stat       = 'T';contrasts(3).c          = [zeros(3,1); 1; -1; zeros(11,1); 1; -1; zeros(10,1)];% Run contrastserrorRoisCont           = gppi_contrasts(ntwFolder,roiList,contrasts);% Bind estimates for different rois into single matrix% bind roi estimates of spm t- or F-values into single niftiroi_ev          = bind_gppi_contrasts(ntwFolder, 'spmT_0001');hi_over_low     = bind_gppi_contrasts(ntwFolder, 'spmT_0002');ppi_hi_over_low = bind_gppi_contrasts(ntwFolder, 'spmT_0003');% Save gPPI-matrizessave([wkdir,'\tutorial\gppi-matrizes.mat'],'roi_ev','hi_over_low','ppi_hi_over_low')heatmap(ppi_hi_over_low)