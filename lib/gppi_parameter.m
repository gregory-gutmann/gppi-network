%% Get gPPI-Parameters% Gregory Gutman (14.11.22)% Implementation took heavily from PPPI.m script written by Donald G. McLaren% and Aaron Schulz as well as spm_peb_ppi.m written by Darren Gitelman        % $Id: PPPI.m    % Copyright (c) 2011, Donald G. McLaren and Aaron Schultz    % Donald G. McLaren and Aaron Schultz    % $Id: spm_peb_ppi.m     % Copyright (C) 2002-2014 Wellcome Trust Centre for Neuroimaging    % Darren Gitelman    function gppi_parameter(fstFolder,ntwFolder,tasks)% Create result foldertry    mkdir([ntwFolder,'gppi',filesep,'parameters']);end% Set-upload([fstFolder, 'SPM.mat']);sessions        = numel(SPM.Sess);% Experiment-spefic parameter RT              = SPM.xY.RT;dt              = SPM.xBF.dt;NT              = round(RT/dt);fMRI_T0         = SPM.xBF.T0; for sess=1:sessions        % Session-specific parameter    Sess            = SPM.Sess(sess);    N               = length(Sess.row);             % number of scans in session      k               = 1:NT:N*NT;                    % microtime to scan time indices    % Psychological variable (task regressor) in microtime    PSY             = psy_parameter(spm_get_ons(SPM,sess), tasks, N, NT);        % HRF        % create basis functions and hrf in scan time and microtime    hrf             = spm_hrf(dt);        % Create convolved explanatory {Hxb} variables in scan time    xb              = spm_dctmtx(N*NT + 128,N);    Hxb             = zeros(N,N);    for i = 1:N        Hx              = conv(xb(:,i),hrf);        Hxb(:,i)        = Hx(k + 128);    end    xb              = xb(129:end,:);    % Eigenvalue-timeseries    evFolder        = [ntwFolder,'eigenvariates',filesep];    evList          = dir([evFolder,'*',num2str(sess),'.mat']);         evList          = {evList.name};        for ev=1:length(evList)                % Load in timeseries        evRoi                   = evList{ev};        timeseries              = load([evFolder,evRoi], 'xY');        xY                      = timeseries.xY;                % Confounds (in scan time) and constant term        X0      = xY(1).X0;         % [whitened] confounds (including drift terms)        M       = size(X0,2);                % get response variable (timeseries),        l       = xY.u;        S       = size(xY,2);        Y       = zeros(length(l),S);        for i = 1:S            Y(:,i) = xY(i).u;       % uses 'eig'        end                        %% Preprarations for deconvoluted neural signal        % remove confounds and save Y in ouput structure        Yc          = Y - X0*inv(X0'*X0)*X0'*Y;        PPI.Y       = Yc;                % specify covariance components; assume neuronal response is white        % treating confounds as fixed effects        Q           = speye(N,N)*N/trace(Hxb'*Hxb);        Q           = blkdiag(Q, speye(M,M)*1e6  );                % get whitening matrix (NB: confounds have already been whitened)        W           = SPM.xX.W(Sess.row,Sess.row);                % create structure for spm_PEB0 not to estimate any contrasts;        PEBP        = cell(2,1);        PEBP{1}.X   = [W*Hxb X0];		% Design matrix for lowest level        PEBP{1}.C   = speye(N,N)/4;		% i.i.d assumptions        PEBP{2}.X   = sparse(N + M,1);	% Design matrix for parameters (0's)        PEBP{2}.C   = Q;                %% Deconvuluted neural signal        C           = spm_PEB(Y,PEBP);        xn          = xb*C{2}.E(1:N);        xn          = spm_detrend(xn);                %% Psychophysiological interactions        PSYxn       = zeros(size(PSY,1),size(PSY,2));        PSYHRF      = zeros(numel((k-1) + fMRI_T0),size(PSY,2));        for j=1:size(PSY,2)               % multiply psychological variable by neural signal            PSYxn(:,j)  = PSY(:,j).*xn;                        % convolve and resample at each scan for bold signal            ppit	    = conv(PSYxn(:,j),hrf);            ppit        = ppit((k-1) + fMRI_T0);            ppi(:,j)    = spm_detrend(ppit);                        % similarly for psychological effect            PSYHRFtmp   = conv(PSY(:,j),hrf);            PSYHRF(:,j) = PSYHRFtmp((k-1) + fMRI_T0);        end                % save psychological variables        PPI.P   = PSYHRF(:,any(PSYHRF));        PPI.ppi = ppi(:,any(ppi));            % define output (shortend for specific experiment, might not run        % for others)        OUT.P.C = PPI.P;        OUT.PPI.C=PPI.ppi;                OUT.P.name={};        OUT.PPI.name={};        for i=1:(length(tasks)-1)            OUT.P.name{i}=Sess.U(i).name;            OUT.PPI.name{end+1}=['PPI_' cell2mat(Sess.U(i).name)];        end        OUT.Y.C=PPI.Y;        OUT.Y.name={[evRoi '_seedtc']};        OUT.C.C=SPM.Sess(sess).C.C;        OUT.C.name=SPM.Sess(sess).C.name;                % Save Output        save([ntwFolder,'gppi',filesep,'parameters',filesep,'PPI_',evRoi],'OUT','-v7.3');                clear PPI ppi OUT    end    clear PSYend